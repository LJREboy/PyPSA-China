# SPDX-FileCopyrightText: : 2022 The PyPSA-China Authors
#
# SPDX-License-Identifier: MIT

from os.path import normpath
from shutil import move

from snakemake.remote.HTTP import RemoteProvider as HTTPRemoteProvider
HTTP = HTTPRemoteProvider()

configfile: "config.yaml"

ATLITE_NPROCESSES = config['atlite'].get('nprocesses', 4)

rule all:
    input:
        # Base year 2020 network
        expand(
            config['results_dir'] + 'version-{version}/prenetworks/{heating_demand}/prenetwork-{opts}-{topology}-{pathway}-2020.nc',
            version=config['version'],
            heating_demand=config['scenario']['heating_demand'],
            opts=config['scenario']['opts'],
            topology=config['scenario']['topology'],
            pathway=config['scenario']['pathway']
        ),
        # Planning horizon networks
        expand(
            config['results_dir'] + 'version-{version}/prenetworks/{heating_demand}/prenetwork-{opts}-{topology}-{pathway}-{planning_horizons}.nc',
            version=config['version'],
            heating_demand=config['scenario']['heating_demand'],
            opts=config['scenario']['opts'],
            topology=config['scenario']['topology'],
            pathway=config['scenario']['pathway'],
            planning_horizons=config['scenario']['planning_horizons']
        )

rule prepare_base_networks_2020:
    input:
        overrides = "data/override_component_attrs",
        edges = "data/grids/edges.txt",
        edges_ext = "data/grids/edges_current.csv",
        solar_thermal_name = "data/heating/solar_thermal-{angle}.h5".format(angle=config['solar_thermal_angle']),
        cop_name = "data/heating/cop.h5",
        province_shape = "data/province_shapes/CHN_adm1.shp",
        elec_load = "data/load/load_2020_weatheryears_1979_2016_TWh.h5",
        heat_demand_profile = "data/heating/heat_demand_profile_{heating_demand}_2020.h5",
        central_fraction = "data/heating/DH_city:town_2020.h5",
        tech_costs = "data/costs/costs_2020.csv",
        **{f"profile_{tech}": f"resources/profile_{tech}.nc"
           for tech in config['renewable']}
    output:
        network_name = config['results_dir'] + 'version-' + str(config['version']) + '/prenetworks/{heating_demand}/prenetwork-{opts}-{topology}-{pathway}-2020.nc'
    threads: 1
    resources: mem_mb=10000
    script: "scripts/prepare_base_network_2020_test.py"

rule prepare_base_networks:
    input:
        overrides = "data/override_component_attrs",
        edges = "data/grids/edges.txt",
        solar_thermal_name = "data/heating/solar_thermal-{angle}.h5".format(angle=config['solar_thermal_angle']),
        cop_name = "data/heating/cop.h5",
        province_shape = "data/province_shapes/CHN_adm1.shp",
        elec_load = "data/load/load_{planning_horizons}_weatheryears_1979_2016_TWh.h5",
        heat_demand_profile = "data/heating/heat_demand_profile_{heating_demand}_{planning_horizons}.h5",
        central_fraction = "data/heating/DH_city:town_2020.h5",
        tech_costs = "data/costs/costs_{planning_horizons}.csv",
        biomass_potental = "data/p_nom/biomass_potential.h5",
        **{f"profile_{tech}": f"resources/profile_{tech}.nc"
           for tech in config['renewable']}
    output:
        network_name = config['results_dir'] + 'version-' + str(config['version']) + '/prenetworks/{heating_demand}/prenetwork-{opts}-{topology}-{pathway}-{planning_horizons}.nc'
    threads: 1
    resources: mem_mb=10000
    script: "scripts/prepare_base_network_test.py"

rule add_existing_baseyear:
    input:
        overrides = "data/override_component_attrs",
        network = config['results_dir'] + 'version-' + str(config['version']) + '/prenetworks/{heating_demand}/prenetwork-{opts}-{topology}-{pathway}-{planning_horizons}.nc',
        tech_costs = "data/costs/costs_{planning_horizons}.csv",
        cop_name = "data/heating/cop.h5",
        **{f"existing_{tech}": f"data/existing_infrastructure/{tech} capacity.csv"
           for tech in config['existing_infrastructure']}
    output:
        network_name = config['results_dir'] + 'version-' + str(config['version']) + '/prenetworks-brownfield/{heating_demand}/prenetwork-{opts}-{topology}-{pathway}-{planning_horizons}.nc'
    wildcard_constraints:
        planning_horizons = config['scenario']['planning_horizons']
    threads: 1
    resources: mem_mb=2000
    script: "scripts/add_existing_baseyear_test.py"

ruleorder: prepare_base_networks_2020 > prepare_base_networks > add_existing_baseyear


